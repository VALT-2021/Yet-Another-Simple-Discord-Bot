{"version":3,"file":"handler.js","sourceRoot":"","sources":["../../ts/utils/handler.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,4CAAmB;AAEnB,MAAa,mBAAmB;IAI5B,YAAY,IAAY;QACpB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAChB,IAAI,CAAC,KAAK,GAAG,IAAI,GAAG,EAAE,CAAA;IAC1B,CAAC;IAEM,KAAK,CAAC,IAAI;QACb,IAAI,MAAM,GAAG,YAAE,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAA;QAC1E,KAAK,IAAI,IAAI,IAAI,MAAM,EAAE;YACrB,IAAI,IAAI,GAAG,CAAC,wDAAa,IAAI,CAAC,IAAI,GAAG,GAAG,GAAG,IAAI,GAAC,CAAC,CAAC,SAAS,CAAC,CAAA;YAC5D,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;SAClC;IACL,CAAC;IAEM,OAAO,CAAC,gBAAwB;QACnC,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,gBAAgB,CAAC,CAAC,OAAO,EAAE,CAAA;IACrD,CAAC;CACJ;AApBD,kDAoBC;AAED,MAAa,gBAAgB;IAIzB,YAAY,IAAY;QACpB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;QAChB,IAAI,CAAC,SAAS,GAAG,IAAI,GAAG,EAAE,CAAA;IAC9B,CAAC;IAEM,KAAK,CAAC,IAAI;QACb,IAAI,MAAM,GAAG,YAAE,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAA;QAC1E,KAAK,IAAI,IAAI,IAAI,MAAM,EAAE;YACrB,IAAI,IAAI,GAAG,CAAC,wDAAa,IAAI,CAAC,IAAI,GAAG,GAAG,GAAG,IAAI,GAAC,CAAC,CAAC,SAAS,CAAC,CAAA;YAC5D,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,CAAA;SAChD;IACL,CAAC;IAEM,OAAO,CAAC,mBAA2B;QACtC,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC,OAAO,EAAE,CAAA;IAC5D,CAAC;CACJ;AApBD,4CAoBC","sourcesContent":["import fs from 'fs'\n\nexport class SlashCommandHandler {\n    public path: string\n    public slash: Map<any, any>\n\n    constructor(path: string) {\n        this.path = path\n        this.slash = new Map()\n    }\n\n    public async init() {\n        let folder = fs.readdirSync(this.path).filter(file => file.endsWith('js'))\n        for (let file of folder) {\n            let base = (await import(this.path + '/' + file))['default']\n            this.slash.set(base.name, base)\n        }\n    }\n\n    public execute(slashCommandName: string): Function {\n        return this.slash.get(slashCommandName).execute()\n    }\n}\n\nexport class ComponentHandler {\n    public path: string\n    public component: Map<any, any>\n\n    constructor(path: string) {\n        this.path = path\n        this.component = new Map()\n    }\n\n    public async init() {\n        let folder = fs.readdirSync(this.path).filter(file => file.endsWith('js'))\n        for (let file of folder) {\n            let base = (await import(this.path + '/' + file))['default']\n            this.component.set(base.type + base.id, base)\n        }\n    }\n\n    public execute(componentIdentifier: string): Function {\n        return this.component.get(componentIdentifier).execute()\n    }\n}"]}